enum DeploymentInterface {
	UI, CLI, STANDALONE
}

enum DeploymentScope {
 	APPLICATION, SERVICE
}

enum ConfigHost {
	CONSUL, VAULT
}

enum ConfigSource {
	ARTIFACTORY, DISTRIBUTED_CONFIG_MANAGEMENT, UNKNOWN
}

enum ConfigFormat {
	KV, YAML
}

enum DistributedConfigChangeStatus {
	INPROGRESS, WAITING_FOR_LOCK, COMPLETED
}

enum DistributedConfigChangeState {
	STARTED, FAILURE, SUCCESS
}

entity Application {
	name String required,
	productName String required,
    description String required
}

entity ApplicationMicroservice (AppMcrSrv) {
	name String required,
	longName String required,
    description String required
}

entity DistributedConfigArtifactRepository (DCAR) {
	name String required,
	url String required,
	userName String required,
	password String required
}

entity DistributedConfigConfiguration (DCC) {
    name String required,
	environmentName String required,
	management Boolean,
    waitForLockTimeOut Integer required
}


entity DistributedConfigArtifact (DCA) {
	repositoryName String required,
    groupId String required,
    artifactId String required,
    fileNamePostFix String required,
    fileExtension String required
}

entity DistributedConfigDeploymentArtifact (DCDR) {
    artifactVersion String required,
    artifactFullName String,
    deploymentId String
}

entity DistributedConfigDeployment (DCD) {
    name String required,
    deploymentScope DeploymentScope required,
    configHost ConfigHost required,
    configFormat ConfigFormat required,
    deploymentInterface DeploymentInterface required,
    start Boolean
}

entity DistributedConfigArtifactChangeLog (DCAC) {
    serviceName String required,
    repositoryName String required,
    groupId String required,
    artifactId String required,
    version String required,
    dateExecuted Instant required,
    comment String
}

entity DistributedConfigResourceChangeLog (DCRCL) {
    version String required,
    configFormat ConfigFormat required,
    configHostKeyPath String required,
    key String required,
    configValue String,
    previousConfigValue String,
    configFileName String,
    dateExecuted Instant required,
    comment String
}

entity DistributedConfigChangeLog (DCCL) {
    deploymentScope DeploymentScope,
    configHost ConfigHost required,
    configHostSessionId String,
    configFormat ConfigFormat required,
    configSource ConfigSource required,
    deploymentInterface DeploymentInterface required,
    state DistributedConfigChangeState required,
    status DistributedConfigChangeStatus required,
    executedBy String required,
    executionStartDate Instant required,
    executionFinishDate Instant,
    numOfArtifacts Integer,
    numOfFiles Integer,
    numOfKeys Integer,
    comment String,
    error String
}

entity DistributedConfigResourceKey (DCRK) {
    configHostKeyPath String required,
	key String
    configSource ConfigSource,
    configHost ConfigHost required,
    configFormat ConfigFormat
    serviceName String required,
    version String required,
    managed Boolean,
    foundOnConfigHost Boolean
}

entity DistributedConfigResource (DCR) {
    value String,
    comment String
}

entity DistributedConfigChangeLogLock (DCCLL) {
    configHost ConfigHost required,
    configHostSessionId String,
	locked Boolean required,
    lockGranted Instant required,
    lockedBy String required,
    comment String
}


relationship OneToOne {
    DistributedConfigDeployment {application(name) required} to Application,
    DistributedConfigDeployment {applicationMicroservice(name) required} to ApplicationMicroservice,
	DistributedConfigDeployment {distributedConfigConfiguration(name) required} to DistributedConfigConfiguration,
	DistributedConfigDeployment {distributedConfigChangeLog} to DistributedConfigChangeLog,
    DistributedConfigConfiguration {application(name) required} to Application,
    DistributedConfigConfiguration {distributedConfigArtifactRepository(name) required} to DistributedConfigArtifactRepository,
    DistributedConfigDeploymentArtifact {application(name) required} to Application,
    DistributedConfigDeploymentArtifact {applicationMicroservice(name) required} to ApplicationMicroservice,
    DistributedConfigDeploymentArtifact {distributedConfigArtifact(artifactId) required} to DistributedConfigArtifact
    DistributedConfigChangeLog {applicationMicroservice(name) required} to ApplicationMicroservice
}

relationship ManyToMany {
  	DistributedConfigDeployment{distributedConfigDeploymentArtifacts(artifactFullName) required} to DistributedConfigDeploymentArtifact,
  	DistributedConfigArtifact{applicationMicroservices(name) required} to ApplicationMicroservice{distributedConfigArtifact}
}

relationship OneToOne {
	DistributedConfigChangeLogLock {application(name) required} to Application,
	DistributedConfigChangeLogLock {applicationMicroservice(name) required} to ApplicationMicroservice,
   	DistributedConfigChangeLogLock {distributedConfigChangeLog required} to DistributedConfigChangeLog,
    DistributedConfigResourceChangeLog{distributedConfigChangeLog required} to DistributedConfigChangeLog,
    DistributedConfigResource{latestDistributedConfigResourceChangeLog(version)} to DistributedConfigResourceChangeLog,
    DistributedConfigResource{distributedConfigResourceKey(configHostKeyPath) required} to DistributedConfigResourceKey,
    DistributedConfigResourceKey{latestDistributedConfigResourceChangeLog(version)} to DistributedConfigResourceChangeLog
}

relationship ManyToOne {
  	DistributedConfigArtifactChangeLog{distributedConfigChangeLog required} to DistributedConfigChangeLog{distributedConfigArtifactChangeLog},
  	DistributedConfigResourceChangeLog{distributedConfigArtifactChangeLog} to DistributedConfigArtifactChangeLog{distributedConfigResourceChangeLog},
  	ApplicationMicroservice{application(name) required} to Application{name}
}


paginate all with pagination
service all with serviceImpl

/*microservice all with distributedconfigmanagement*/
